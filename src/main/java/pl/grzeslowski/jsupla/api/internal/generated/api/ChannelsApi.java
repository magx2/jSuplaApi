/*
 * SUPLA Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package pl.grzeslowski.jsupla.api.internal.generated.api;

import com.google.gson.reflect.TypeToken;
import pl.grzeslowski.jsupla.api.internal.generated.ApiCallback;
import pl.grzeslowski.jsupla.api.internal.generated.ApiClient;
import pl.grzeslowski.jsupla.api.internal.generated.ApiException;
import pl.grzeslowski.jsupla.api.internal.generated.ApiResponse;
import pl.grzeslowski.jsupla.api.internal.generated.Configuration;
import pl.grzeslowski.jsupla.api.internal.generated.Pair;
import pl.grzeslowski.jsupla.api.internal.generated.ProgressRequestBody;
import pl.grzeslowski.jsupla.api.internal.generated.ProgressResponseBody;
import pl.grzeslowski.jsupla.api.internal.generated.model.Channel;
import pl.grzeslowski.jsupla.api.internal.generated.model.ChannelExecuteActionRequest;
import pl.grzeslowski.jsupla.api.internal.generated.model.ChannelFunctionEnumNames;
import pl.grzeslowski.jsupla.api.internal.generated.model.ChannelMeasurementLog;
import pl.grzeslowski.jsupla.api.internal.generated.model.ChannelUpdateRequest;
import pl.grzeslowski.jsupla.api.internal.generated.model.Schedule;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChannelsApi {
    private ApiClient apiClient;

    public ChannelsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChannelsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for executeAction
     * @param body Defines an action to execute on channel. The &#x60;action&#x60; key is always required. The rest of the keys are params depending on the chosen action. Read more on [Github Wiki](https://github.com/SUPLA/supla-cloud/wiki/Channel-Actions). (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeActionCall(ChannelExecuteActionRequest body, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/channels/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"BearerAuth", "OAuth2"};
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call executeActionValidateBeforeCall(ChannelExecuteActionRequest body, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling executeAction(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling executeAction(Async)");
        }

        com.squareup.okhttp.Call call = executeActionCall(body, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Execute action on the channel
     * 
     * @param body Defines an action to execute on channel. The &#x60;action&#x60; key is always required. The rest of the keys are params depending on the chosen action. Read more on [Github Wiki](https://github.com/SUPLA/supla-cloud/wiki/Channel-Actions). (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void executeAction(ChannelExecuteActionRequest body, Integer id) throws ApiException {
        executeActionWithHttpInfo(body, id);
    }

    /**
     * Execute action on the channel
     * 
     * @param body Defines an action to execute on channel. The &#x60;action&#x60; key is always required. The rest of the keys are params depending on the chosen action. Read more on [Github Wiki](https://github.com/SUPLA/supla-cloud/wiki/Channel-Actions). (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> executeActionWithHttpInfo(ChannelExecuteActionRequest body, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = executeActionValidateBeforeCall(body, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Execute action on the channel (asynchronously)
     *
     * @param body Defines an action to execute on channel. The &#x60;action&#x60; key is always required. The rest of the keys are params depending on the chosen action. Read more on [Github Wiki](https://github.com/SUPLA/supla-cloud/wiki/Channel-Actions). (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call executeActionAsync(ChannelExecuteActionRequest body, Integer id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeActionValidateBeforeCall(body, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getChannel
     * @param id  (required)
     * @param include Specify what extra fields to include in the response. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChannelCall(Integer id, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"BearerAuth", "OAuth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChannelValidateBeforeCall(Integer id, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getChannel(Async)");
        }
        
        com.squareup.okhttp.Call call = getChannelCall(id, include, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get channel by ID
     * 
     * @param id  (required)
     * @param include Specify what extra fields to include in the response. (optional)
     * @return Channel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Channel getChannel(Integer id, List<String> include) throws ApiException {
        ApiResponse<Channel> resp = getChannelWithHttpInfo(id, include);
        return resp.getData();
    }

    /**
     * Get channel by ID
     * 
     * @param id  (required)
     * @param include Specify what extra fields to include in the response. (optional)
     * @return ApiResponse&lt;Channel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Channel> getChannelWithHttpInfo(Integer id, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getChannelValidateBeforeCall(id, include, null, null);
        Type localVarReturnType = new TypeToken<Channel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get channel by ID (asynchronously)
     * 
     * @param id  (required)
     * @param include Specify what extra fields to include in the response. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChannelAsync(Integer id, List<String> include, final ApiCallback<Channel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChannelValidateBeforeCall(id, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Channel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChannelMeasurementLogs
     * @param id  (required)
     * @param limit Maximum items count in response, from 1 to 5000 (optional)
     * @param offset Pagination offset (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChannelMeasurementLogsCall(Integer id, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{id}/measurement-logs"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"BearerAuth", "OAuth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChannelMeasurementLogsValidateBeforeCall(Integer id, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getChannelMeasurementLogs(Async)");
        }
        
        com.squareup.okhttp.Call call = getChannelMeasurementLogsCall(id, limit, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get measurement logs.
     * Supported channel functions: &#x60;THERMOMETER&#x60; and &#x60;HUMIDITYANDTEMPERATURE&#x60;. Logs ordered by date, descending.
     * @param id  (required)
     * @param limit Maximum items count in response, from 1 to 5000 (optional)
     * @param offset Pagination offset (optional)
     * @return List&lt;ChannelMeasurementLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ChannelMeasurementLog> getChannelMeasurementLogs(Integer id, Integer limit, Integer offset) throws ApiException {
        ApiResponse<List<ChannelMeasurementLog>> resp = getChannelMeasurementLogsWithHttpInfo(id, limit, offset);
        return resp.getData();
    }

    /**
     * Get measurement logs.
     * Supported channel functions: &#x60;THERMOMETER&#x60; and &#x60;HUMIDITYANDTEMPERATURE&#x60;. Logs ordered by date, descending.
     * @param id  (required)
     * @param limit Maximum items count in response, from 1 to 5000 (optional)
     * @param offset Pagination offset (optional)
     * @return ApiResponse&lt;List&lt;ChannelMeasurementLog&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ChannelMeasurementLog>> getChannelMeasurementLogsWithHttpInfo(Integer id, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = getChannelMeasurementLogsValidateBeforeCall(id, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<List<ChannelMeasurementLog>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get measurement logs. (asynchronously)
     * Supported channel functions: &#x60;THERMOMETER&#x60; and &#x60;HUMIDITYANDTEMPERATURE&#x60;. Logs ordered by date, descending.
     * @param id  (required)
     * @param limit Maximum items count in response, from 1 to 5000 (optional)
     * @param offset Pagination offset (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChannelMeasurementLogsAsync(Integer id, Integer limit, Integer offset, final ApiCallback<List<ChannelMeasurementLog>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChannelMeasurementLogsValidateBeforeCall(id, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ChannelMeasurementLog>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChannelMeasurementLogsCsvFile
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChannelMeasurementLogsCsvFileCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{id}/measurement-logs-csv"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/zip", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"BearerAuth", "OAuth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChannelMeasurementLogsCsvFileValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getChannelMeasurementLogsCsvFile(Async)");
        }
        
        com.squareup.okhttp.Call call = getChannelMeasurementLogsCsvFileCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get measurement logs as zipped CSV file.
     * Supported channel functions: &#x60;THERMOMETER&#x60; and &#x60;HUMIDITYANDTEMPERATURE&#x60;. Logs ordered by date, descending.
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getChannelMeasurementLogsCsvFile(Integer id) throws ApiException {
        getChannelMeasurementLogsCsvFileWithHttpInfo(id);
    }

    /**
     * Get measurement logs as zipped CSV file.
     * Supported channel functions: &#x60;THERMOMETER&#x60; and &#x60;HUMIDITYANDTEMPERATURE&#x60;. Logs ordered by date, descending.
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getChannelMeasurementLogsCsvFileWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = getChannelMeasurementLogsCsvFileValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get measurement logs as zipped CSV file. (asynchronously)
     * Supported channel functions: &#x60;THERMOMETER&#x60; and &#x60;HUMIDITYANDTEMPERATURE&#x60;. Logs ordered by date, descending.
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChannelMeasurementLogsCsvFileAsync(Integer id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChannelMeasurementLogsCsvFileValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getChannelSchedules
     * @param id  (required)
     * @param include Specify what extra fields to include in the response. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChannelSchedulesCall(Integer id, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{id}/schedules"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"BearerAuth", "OAuth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChannelSchedulesValidateBeforeCall(Integer id, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getChannelSchedules(Async)");
        }
        
        com.squareup.okhttp.Call call = getChannelSchedulesCall(id, include, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get schedules list of the channel
     * 
     * @param id  (required)
     * @param include Specify what extra fields to include in the response. (optional)
     * @return List&lt;Schedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Schedule> getChannelSchedules(Integer id, List<String> include) throws ApiException {
        ApiResponse<List<Schedule>> resp = getChannelSchedulesWithHttpInfo(id, include);
        return resp.getData();
    }

    /**
     * Get schedules list of the channel
     * 
     * @param id  (required)
     * @param include Specify what extra fields to include in the response. (optional)
     * @return ApiResponse&lt;List&lt;Schedule&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Schedule>> getChannelSchedulesWithHttpInfo(Integer id, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getChannelSchedulesValidateBeforeCall(id, include, null, null);
        Type localVarReturnType = new TypeToken<List<Schedule>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get schedules list of the channel (asynchronously)
     * 
     * @param id  (required)
     * @param include Specify what extra fields to include in the response. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChannelSchedulesAsync(Integer id, List<String> include, final ApiCallback<List<Schedule>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChannelSchedulesValidateBeforeCall(id, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Schedule>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChannels
     * @param include Specify what extra fields to include in the response. (optional)
     * @param function  (optional)
     * @param io Return only &#x60;input&#x60; or &#x60;output&#x60; channels. (optional)
     * @param hasFunction Return only channels with (&#x60;true&#x60;) or without (&#x60;false&#x60;) chosen functions. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChannelsCall(List<String> include, List<ChannelFunctionEnumNames> function, String io, Boolean hasFunction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "include", include));
        if (function != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "function", function));
        if (io != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("io", io));
        if (hasFunction != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hasFunction", hasFunction));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"BearerAuth", "OAuth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChannelsValidateBeforeCall(List<String> include, List<ChannelFunctionEnumNames> function, String io, Boolean hasFunction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getChannelsCall(include, function, io, hasFunction, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get channels list
     * 
     * @param include Specify what extra fields to include in the response. (optional)
     * @param function  (optional)
     * @param io Return only &#x60;input&#x60; or &#x60;output&#x60; channels. (optional)
     * @param hasFunction Return only channels with (&#x60;true&#x60;) or without (&#x60;false&#x60;) chosen functions. (optional)
     * @return List&lt;Channel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Channel> getChannels(List<String> include, List<ChannelFunctionEnumNames> function, String io, Boolean hasFunction) throws ApiException {
        ApiResponse<List<Channel>> resp = getChannelsWithHttpInfo(include, function, io, hasFunction);
        return resp.getData();
    }

    /**
     * Get channels list
     * 
     * @param include Specify what extra fields to include in the response. (optional)
     * @param function  (optional)
     * @param io Return only &#x60;input&#x60; or &#x60;output&#x60; channels. (optional)
     * @param hasFunction Return only channels with (&#x60;true&#x60;) or without (&#x60;false&#x60;) chosen functions. (optional)
     * @return ApiResponse&lt;List&lt;Channel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Channel>> getChannelsWithHttpInfo(List<String> include, List<ChannelFunctionEnumNames> function, String io, Boolean hasFunction) throws ApiException {
        com.squareup.okhttp.Call call = getChannelsValidateBeforeCall(include, function, io, hasFunction, null, null);
        Type localVarReturnType = new TypeToken<List<Channel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get channels list (asynchronously)
     * 
     * @param include Specify what extra fields to include in the response. (optional)
     * @param function  (optional)
     * @param io Return only &#x60;input&#x60; or &#x60;output&#x60; channels. (optional)
     * @param hasFunction Return only channels with (&#x60;true&#x60;) or without (&#x60;false&#x60;) chosen functions. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChannelsAsync(List<String> include, List<ChannelFunctionEnumNames> function, String io, Boolean hasFunction, final ApiCallback<List<Channel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChannelsValidateBeforeCall(include, function, io, hasFunction, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Channel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateChannel
     * @param body  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateChannelCall(ChannelUpdateRequest body, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/channels/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"BearerAuth", "OAuth2"};
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateChannelValidateBeforeCall(ChannelUpdateRequest body, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateChannel(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateChannel(Async)");
        }

        com.squareup.okhttp.Call call = updateChannelCall(body, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update channel
     * 
     * @param body  (required)
     * @param id  (required)
     * @return Channel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Channel updateChannel(ChannelUpdateRequest body, Integer id) throws ApiException {
        ApiResponse<Channel> resp = updateChannelWithHttpInfo(body, id);
        return resp.getData();
    }

    /**
     * Update channel
     * 
     * @param body  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Channel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Channel> updateChannelWithHttpInfo(ChannelUpdateRequest body, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = updateChannelValidateBeforeCall(body, id, null, null);
        Type localVarReturnType = new TypeToken<Channel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update channel (asynchronously)
     * 
     * @param body  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateChannelAsync(ChannelUpdateRequest body, Integer id, final ApiCallback<Channel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateChannelValidateBeforeCall(body, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Channel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
