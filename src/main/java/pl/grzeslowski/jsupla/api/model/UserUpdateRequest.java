/*
 * SUPLA Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package pl.grzeslowski.jsupla.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * UserUpdateRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-10-03T19:40:18.502Z")
public class UserUpdateRequest {
  /**
   * The &#x60;change:userTimezone&#x60; requires to provide also a &#x60;timezone&#x60; value in the request. The &#x60;change:password&#x60; requires to provide also a &#x60;newPassword&#x60; and &#x60;oldPassword&#x60; in the request.
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    CHANGE_CLIENTSREGISTRATIONENABLED("change:clientsRegistrationEnabled"),
    
    CHANGE_IODEVICESREGISTRATIONENABLED("change:ioDevicesRegistrationEnabled"),
    
    CHANGE_USERTIMEZONE("change:userTimezone"),
    
    CHANGE_PASSWORD("change:password"),
    
    AGREE_RULES("agree:rules"),
    
    AGREE_COOKIES("agree:cookies");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String text) {
      for (ActionEnum b : ActionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ActionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("action")
  private ActionEnum action = null;

  public UserUpdateRequest action(ActionEnum action) {
    this.action = action;
    return this;
  }

   /**
   * The &#x60;change:userTimezone&#x60; requires to provide also a &#x60;timezone&#x60; value in the request. The &#x60;change:password&#x60; requires to provide also a &#x60;newPassword&#x60; and &#x60;oldPassword&#x60; in the request.
   * @return action
  **/
  @ApiModelProperty(value = "The `change:userTimezone` requires to provide also a `timezone` value in the request. The `change:password` requires to provide also a `newPassword` and `oldPassword` in the request.")
  public ActionEnum getAction() {
    return action;
  }

  public void setAction(ActionEnum action) {
    this.action = action;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserUpdateRequest userUpdateRequest = (UserUpdateRequest) o;
    return Objects.equals(this.action, userUpdateRequest.action);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserUpdateRequest {\n");
    
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

