/*
 * SUPLA Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.3.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package pl.grzeslowski.jsupla.api.generated.api;

import com.google.gson.reflect.TypeToken;
import pl.grzeslowski.jsupla.api.generated.ApiCallback;
import pl.grzeslowski.jsupla.api.generated.ApiClient;
import pl.grzeslowski.jsupla.api.generated.ApiException;
import pl.grzeslowski.jsupla.api.generated.ApiResponse;
import pl.grzeslowski.jsupla.api.generated.Configuration;
import pl.grzeslowski.jsupla.api.generated.Pair;
import pl.grzeslowski.jsupla.api.generated.ProgressRequestBody;
import pl.grzeslowski.jsupla.api.generated.ProgressResponseBody;
import pl.grzeslowski.jsupla.api.generated.model.ActionableSubjectTypeEnum;
import pl.grzeslowski.jsupla.api.generated.model.AuditEntry;
import pl.grzeslowski.jsupla.api.generated.model.DirectLink;
import pl.grzeslowski.jsupla.api.generated.model.DirectLinkRequest;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DirectLinksApi {
    private ApiClient apiClient;

    public DirectLinksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DirectLinksApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createDirectLink
     *
     * @param body                    (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDirectLinkCall(DirectLinkRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/direct-links";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                                   .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                   .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"BearerAuth", "OAuth2"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDirectLinkValidateBeforeCall(DirectLinkRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        com.squareup.okhttp.Call call = createDirectLinkCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new Direct Link
     *
     * @param body (optional)
     * @return DirectLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DirectLink createDirectLink(DirectLinkRequest body) throws ApiException {
        ApiResponse<DirectLink> resp = createDirectLinkWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a new Direct Link
     *
     * @param body (optional)
     * @return ApiResponse&lt;DirectLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DirectLink> createDirectLinkWithHttpInfo(DirectLinkRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createDirectLinkValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<DirectLink>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new Direct Link (asynchronously)
     *
     * @param body     (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDirectLinkAsync(DirectLinkRequest body, final ApiCallback<DirectLink> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDirectLinkValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DirectLink>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for deleteDirectLink
     *
     * @param id                      (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDirectLinkCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/direct-links/{id}"
                                      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                                   .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                   .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"BearerAuth", "OAuth2"};
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDirectLinkValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteDirectLink(Async)");
        }

        com.squareup.okhttp.Call call = deleteDirectLinkCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete Direct Link
     *
     * @param id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteDirectLink(Integer id) throws ApiException {
        deleteDirectLinkWithHttpInfo(id);
    }

    /**
     * Delete Direct Link
     *
     * @param id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteDirectLinkWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = deleteDirectLinkValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete Direct Link (asynchronously)
     *
     * @param id       (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDirectLinkAsync(Integer id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDirectLinkValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for getDirectLink
     *
     * @param id                      (required)
     * @param include                 Specify what extra fields to include in the response. (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDirectLinkCall(Integer id, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/direct-links/{id}"
                                      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                                   .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                   .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"BearerAuth", "OAuth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDirectLinkValidateBeforeCall(Integer id, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDirectLink(Async)");
        }

        com.squareup.okhttp.Call call = getDirectLinkCall(id, include, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Direct Link
     *
     * @param id      (required)
     * @param include Specify what extra fields to include in the response. (optional)
     * @return DirectLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DirectLink getDirectLink(Integer id, List<String> include) throws ApiException {
        ApiResponse<DirectLink> resp = getDirectLinkWithHttpInfo(id, include);
        return resp.getData();
    }

    /**
     * Get Direct Link
     *
     * @param id      (required)
     * @param include Specify what extra fields to include in the response. (optional)
     * @return ApiResponse&lt;DirectLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DirectLink> getDirectLinkWithHttpInfo(Integer id, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getDirectLinkValidateBeforeCall(id, include, null, null);
        Type localVarReturnType = new TypeToken<DirectLink>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Direct Link (asynchronously)
     *
     * @param id       (required)
     * @param include  Specify what extra fields to include in the response. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDirectLinkAsync(Integer id, List<String> include, final ApiCallback<DirectLink> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDirectLinkValidateBeforeCall(id, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DirectLink>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for getDirectLinkAudit
     *
     * @param id                      (required)
     * @param page                    Page number, starting from 1. (optional)
     * @param pageSize                Page size, default 10. (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDirectLinkAuditCall(Integer id, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/direct-links/{id}/audit"
                                      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                                   .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                   .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"BearerAuth", "OAuth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDirectLinkAuditValidateBeforeCall(Integer id, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDirectLinkAudit(Async)");
        }

        com.squareup.okhttp.Call call = getDirectLinkAuditCall(id, page, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Direct Link audit
     *
     * @param id       (required)
     * @param page     Page number, starting from 1. (optional)
     * @param pageSize Page size, default 10. (optional)
     * @return List&lt;AuditEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AuditEntry> getDirectLinkAudit(Integer id, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<List<AuditEntry>> resp = getDirectLinkAuditWithHttpInfo(id, page, pageSize);
        return resp.getData();
    }

    /**
     * Get Direct Link audit
     *
     * @param id       (required)
     * @param page     Page number, starting from 1. (optional)
     * @param pageSize Page size, default 10. (optional)
     * @return ApiResponse&lt;List&lt;AuditEntry&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AuditEntry>> getDirectLinkAuditWithHttpInfo(Integer id, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getDirectLinkAuditValidateBeforeCall(id, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<List<AuditEntry>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Direct Link audit (asynchronously)
     *
     * @param id       (required)
     * @param page     Page number, starting from 1. (optional)
     * @param pageSize Page size, default 10. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDirectLinkAuditAsync(Integer id, Integer page, Integer pageSize, final ApiCallback<List<AuditEntry>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDirectLinkAuditValidateBeforeCall(id, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AuditEntry>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for getDirectLinks
     *
     * @param include                 Specify what extra fields to include in the response. (optional)
     * @param subjectType             Filter direct links by subjectType and subjectId (must go together). (optional)
     * @param subjectId               Filter direct links by subjectType and subjectId (must go together). (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDirectLinksCall(List<String> include, ActionableSubjectTypeEnum subjectType, Integer subjectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/direct-links";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "include", include));
        if (subjectType != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("subjectType", subjectType));
        if (subjectId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("subjectId", subjectId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                                   .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                   .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"BearerAuth", "OAuth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDirectLinksValidateBeforeCall(List<String> include, ActionableSubjectTypeEnum subjectType, Integer subjectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        com.squareup.okhttp.Call call = getDirectLinksCall(include, subjectType, subjectId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Direct Links list
     *
     * @param include     Specify what extra fields to include in the response. (optional)
     * @param subjectType Filter direct links by subjectType and subjectId (must go together). (optional)
     * @param subjectId   Filter direct links by subjectType and subjectId (must go together). (optional)
     * @return List&lt;DirectLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DirectLink> getDirectLinks(List<String> include, ActionableSubjectTypeEnum subjectType, Integer subjectId) throws ApiException {
        ApiResponse<List<DirectLink>> resp = getDirectLinksWithHttpInfo(include, subjectType, subjectId);
        return resp.getData();
    }

    /**
     * Get Direct Links list
     *
     * @param include     Specify what extra fields to include in the response. (optional)
     * @param subjectType Filter direct links by subjectType and subjectId (must go together). (optional)
     * @param subjectId   Filter direct links by subjectType and subjectId (must go together). (optional)
     * @return ApiResponse&lt;List&lt;DirectLink&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DirectLink>> getDirectLinksWithHttpInfo(List<String> include, ActionableSubjectTypeEnum subjectType, Integer subjectId) throws ApiException {
        com.squareup.okhttp.Call call = getDirectLinksValidateBeforeCall(include, subjectType, subjectId, null, null);
        Type localVarReturnType = new TypeToken<List<DirectLink>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Direct Links list (asynchronously)
     *
     * @param include     Specify what extra fields to include in the response. (optional)
     * @param subjectType Filter direct links by subjectType and subjectId (must go together). (optional)
     * @param subjectId   Filter direct links by subjectType and subjectId (must go together). (optional)
     * @param callback    The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDirectLinksAsync(List<String> include, ActionableSubjectTypeEnum subjectType, Integer subjectId, final ApiCallback<List<DirectLink>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDirectLinksValidateBeforeCall(include, subjectType, subjectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DirectLink>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for updateDirectLink
     *
     * @param id                      (required)
     * @param body                    (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDirectLinkCall(Integer id, DirectLinkRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/direct-links/{id}"
                                      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                                   .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                   .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"BearerAuth", "OAuth2"};
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDirectLinkValidateBeforeCall(Integer id, DirectLinkRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateDirectLink(Async)");
        }

        com.squareup.okhttp.Call call = updateDirectLinkCall(id, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Direct Link
     *
     * @param id   (required)
     * @param body (optional)
     * @return DirectLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DirectLink updateDirectLink(Integer id, DirectLinkRequest body) throws ApiException {
        ApiResponse<DirectLink> resp = updateDirectLinkWithHttpInfo(id, body);
        return resp.getData();
    }

    /**
     * Update Direct Link
     *
     * @param id   (required)
     * @param body (optional)
     * @return ApiResponse&lt;DirectLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DirectLink> updateDirectLinkWithHttpInfo(Integer id, DirectLinkRequest body) throws ApiException {
        com.squareup.okhttp.Call call = updateDirectLinkValidateBeforeCall(id, body, null, null);
        Type localVarReturnType = new TypeToken<DirectLink>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Direct Link (asynchronously)
     *
     * @param id       (required)
     * @param body     (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDirectLinkAsync(Integer id, DirectLinkRequest body, final ApiCallback<DirectLink> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDirectLinkValidateBeforeCall(id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DirectLink>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
