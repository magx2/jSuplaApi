/*
 * SUPLA Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.3.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package pl.grzeslowski.jsupla.api.generated.api;

import com.google.gson.reflect.TypeToken;
import pl.grzeslowski.jsupla.api.generated.ApiCallback;
import pl.grzeslowski.jsupla.api.generated.ApiClient;
import pl.grzeslowski.jsupla.api.generated.ApiException;
import pl.grzeslowski.jsupla.api.generated.ApiResponse;
import pl.grzeslowski.jsupla.api.generated.Configuration;
import pl.grzeslowski.jsupla.api.generated.Pair;
import pl.grzeslowski.jsupla.api.generated.ProgressRequestBody;
import pl.grzeslowski.jsupla.api.generated.ProgressResponseBody;
import pl.grzeslowski.jsupla.api.generated.model.AccessIdentifier;
import pl.grzeslowski.jsupla.api.generated.model.ChannelFunctionEnumNames;
import pl.grzeslowski.jsupla.api.generated.model.UserIcon;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserIconsApi {
    private ApiClient apiClient;

    public UserIconsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserIconsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createUserIcon
     *
     * @param function                (optional)
     * @param sourceIcon              (optional)
     * @param image1                  (optional)
     * @param image2                  (optional)
     * @param image3                  (optional)
     * @param image4                  (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUserIconCall(ChannelFunctionEnumNames function, Integer sourceIcon, File image1, File image2, File image3, File image4, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user-icons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (function != null)
            localVarFormParams.put("function", function);
        if (sourceIcon != null)
            localVarFormParams.put("sourceIcon", sourceIcon);
        if (image1 != null)
            localVarFormParams.put("image1", image1);
        if (image2 != null)
            localVarFormParams.put("image2", image2);
        if (image3 != null)
            localVarFormParams.put("image3", image3);
        if (image4 != null)
            localVarFormParams.put("image4", image4);

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                                   .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                   .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"BearerAuth", "OAuth2"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUserIconValidateBeforeCall(ChannelFunctionEnumNames function, Integer sourceIcon, File image1, File image2, File image3, File image4, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        com.squareup.okhttp.Call call = createUserIconCall(function, sourceIcon, image1, image2, image3, image4, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new User Icon
     *
     * @param function   (optional)
     * @param sourceIcon (optional)
     * @param image1     (optional)
     * @param image2     (optional)
     * @param image3     (optional)
     * @param image4     (optional)
     * @return AccessIdentifier
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccessIdentifier createUserIcon(ChannelFunctionEnumNames function, Integer sourceIcon, File image1, File image2, File image3, File image4) throws ApiException {
        ApiResponse<AccessIdentifier> resp = createUserIconWithHttpInfo(function, sourceIcon, image1, image2, image3, image4);
        return resp.getData();
    }

    /**
     * Create a new User Icon
     *
     * @param function   (optional)
     * @param sourceIcon (optional)
     * @param image1     (optional)
     * @param image2     (optional)
     * @param image3     (optional)
     * @param image4     (optional)
     * @return ApiResponse&lt;AccessIdentifier&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccessIdentifier> createUserIconWithHttpInfo(ChannelFunctionEnumNames function, Integer sourceIcon, File image1, File image2, File image3, File image4) throws ApiException {
        com.squareup.okhttp.Call call = createUserIconValidateBeforeCall(function, sourceIcon, image1, image2, image3, image4, null, null);
        Type localVarReturnType = new TypeToken<AccessIdentifier>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new User Icon (asynchronously)
     *
     * @param function   (optional)
     * @param sourceIcon (optional)
     * @param image1     (optional)
     * @param image2     (optional)
     * @param image3     (optional)
     * @param image4     (optional)
     * @param callback   The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUserIconAsync(ChannelFunctionEnumNames function, Integer sourceIcon, File image1, File image2, File image3, File image4, final ApiCallback<AccessIdentifier> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUserIconValidateBeforeCall(function, sourceIcon, image1, image2, image3, image4, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccessIdentifier>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for deleteUserIcon
     *
     * @param id                      (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUserIconCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user-icons/{id}"
                                      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                                   .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                   .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"BearerAuth", "OAuth2"};
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUserIconValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteUserIcon(Async)");
        }

        com.squareup.okhttp.Call call = deleteUserIconCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete User Icon
     *
     * @param id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteUserIcon(Integer id) throws ApiException {
        deleteUserIconWithHttpInfo(id);
    }

    /**
     * Delete User Icon
     *
     * @param id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteUserIconWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserIconValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete User Icon (asynchronously)
     *
     * @param id       (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserIconAsync(Integer id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserIconValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for getUserIcons
     *
     * @param include                 Specify what extra fields to include in the response. (optional)
     * @param function                Return only icons for given function (optional)
     * @param ids                     Return only icons with given identifiers (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserIconsCall(List<String> include, List<ChannelFunctionEnumNames> function, List<Integer> ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user-icons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "include", include));
        if (function != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "function", function));
        if (ids != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "ids", ids));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                                   .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                   .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"BearerAuth", "OAuth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserIconsValidateBeforeCall(List<String> include, List<ChannelFunctionEnumNames> function, List<Integer> ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        com.squareup.okhttp.Call call = getUserIconsCall(include, function, ids, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get user icons
     *
     * @param include  Specify what extra fields to include in the response. (optional)
     * @param function Return only icons for given function (optional)
     * @param ids      Return only icons with given identifiers (optional)
     * @return List&lt;UserIcon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<UserIcon> getUserIcons(List<String> include, List<ChannelFunctionEnumNames> function, List<Integer> ids) throws ApiException {
        ApiResponse<List<UserIcon>> resp = getUserIconsWithHttpInfo(include, function, ids);
        return resp.getData();
    }

    /**
     * Get user icons
     *
     * @param include  Specify what extra fields to include in the response. (optional)
     * @param function Return only icons for given function (optional)
     * @param ids      Return only icons with given identifiers (optional)
     * @return ApiResponse&lt;List&lt;UserIcon&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<UserIcon>> getUserIconsWithHttpInfo(List<String> include, List<ChannelFunctionEnumNames> function, List<Integer> ids) throws ApiException {
        com.squareup.okhttp.Call call = getUserIconsValidateBeforeCall(include, function, ids, null, null);
        Type localVarReturnType = new TypeToken<List<UserIcon>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get user icons (asynchronously)
     *
     * @param include  Specify what extra fields to include in the response. (optional)
     * @param function Return only icons for given function (optional)
     * @param ids      Return only icons with given identifiers (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserIconsAsync(List<String> include, List<ChannelFunctionEnumNames> function, List<Integer> ids, final ApiCallback<List<UserIcon>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserIconsValidateBeforeCall(include, function, ids, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<UserIcon>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for userIconsIdImageIndexGet
     *
     * @param id                      (required)
     * @param imageIndex              (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userIconsIdImageIndexGetCall(Integer id, Integer imageIndex, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user-icons/{id}/{imageIndex}"
                                      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
                                      .replaceAll("\\{" + "imageIndex" + "\\}", apiClient.escapeString(imageIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "image/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                                   .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                   .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"BearerAuth", "OAuth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userIconsIdImageIndexGetValidateBeforeCall(Integer id, Integer imageIndex, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userIconsIdImageIndexGet(Async)");
        }
        // verify the required parameter 'imageIndex' is set
        if (imageIndex == null) {
            throw new ApiException("Missing the required parameter 'imageIndex' when calling userIconsIdImageIndexGet(Async)");
        }

        com.squareup.okhttp.Call call = userIconsIdImageIndexGetCall(id, imageIndex, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get User Icon image at specified index
     *
     * @param id         (required)
     * @param imageIndex (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File userIconsIdImageIndexGet(Integer id, Integer imageIndex) throws ApiException {
        ApiResponse<File> resp = userIconsIdImageIndexGetWithHttpInfo(id, imageIndex);
        return resp.getData();
    }

    /**
     * Get User Icon image at specified index
     *
     * @param id         (required)
     * @param imageIndex (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> userIconsIdImageIndexGetWithHttpInfo(Integer id, Integer imageIndex) throws ApiException {
        com.squareup.okhttp.Call call = userIconsIdImageIndexGetValidateBeforeCall(id, imageIndex, null, null);
        Type localVarReturnType = new TypeToken<File>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get User Icon image at specified index (asynchronously)
     *
     * @param id         (required)
     * @param imageIndex (required)
     * @param callback   The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userIconsIdImageIndexGetAsync(Integer id, Integer imageIndex, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userIconsIdImageIndexGetValidateBeforeCall(id, imageIndex, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
