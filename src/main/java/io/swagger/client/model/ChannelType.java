/*
 * SUPLA Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ChannelType
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-10-03T19:40:18.502Z")
public class ChannelType {
  @SerializedName("id")
  private Integer id = null;

  /**
   * Gets or Sets name
   */
  @JsonAdapter(NameEnum.Adapter.class)
  public enum NameEnum {
    SENSORNO("SENSORNO"),
    
    SENSORNC("SENSORNC"),
    
    DISTANCESENSOR("DISTANCESENSOR"),
    
    CALLBUTTON("CALLBUTTON"),
    
    RELAYHFD4("RELAYHFD4"),
    
    RELAYG5LA1A("RELAYG5LA1A"),
    
    RELAY2XG5LA1A("RELAY2XG5LA1A"),
    
    RELAY("RELAY"),
    
    THERMOMETERDS18B20("THERMOMETERDS18B20"),
    
    DHT11("DHT11"),
    
    DHT21("DHT21"),
    
    DHT22("DHT22"),
    
    AM2301("AM2301"),
    
    AM2302("AM2302"),
    
    THERMOMETER("THERMOMETER"),
    
    HUMIDITYSENSOR("HUMIDITYSENSOR"),
    
    HUMIDITYANDTEMPSENSOR("HUMIDITYANDTEMPSENSOR"),
    
    WINDSENSOR("WINDSENSOR"),
    
    PRESSURESENSOR("PRESSURESENSOR"),
    
    RAINSENSOR("RAINSENSOR"),
    
    WEIGHTSENSOR("WEIGHTSENSOR"),
    
    WEATHER_STATION("WEATHER_STATION"),
    
    DIMMER("DIMMER"),
    
    RGBLEDCONTROLLER("RGBLEDCONTROLLER"),
    
    DIMMERANDRGBLED("DIMMERANDRGBLED");

    private String value;

    NameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NameEnum fromValue(String text) {
      for (NameEnum b : NameEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<NameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NameEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return NameEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("name")
  private NameEnum name = null;

  @SerializedName("caption")
  private String caption = null;

  @SerializedName("output")
  private Boolean output = null;

  public ChannelType id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Channel type identifier
   * @return id
  **/
  @ApiModelProperty(value = "Channel type identifier")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public ChannelType name(NameEnum name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public NameEnum getName() {
    return name;
  }

  public void setName(NameEnum name) {
    this.name = name;
  }

  public ChannelType caption(String caption) {
    this.caption = caption;
    return this;
  }

   /**
   * Get caption
   * @return caption
  **/
  @ApiModelProperty(example = "Sensor (normal open)", value = "")
  public String getCaption() {
    return caption;
  }

  public void setCaption(String caption) {
    this.caption = caption;
  }

  public ChannelType output(Boolean output) {
    this.output = output;
    return this;
  }

   /**
   * Whether the channel is output type (i.e. can take action) or input (i.e. provide data)
   * @return output
  **/
  @ApiModelProperty(example = "false", value = "Whether the channel is output type (i.e. can take action) or input (i.e. provide data)")
  public Boolean isOutput() {
    return output;
  }

  public void setOutput(Boolean output) {
    this.output = output;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelType channelType = (ChannelType) o;
    return Objects.equals(this.id, channelType.id) &&
        Objects.equals(this.name, channelType.name) &&
        Objects.equals(this.caption, channelType.caption) &&
        Objects.equals(this.output, channelType.output);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, caption, output);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelType {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    caption: ").append(toIndentedString(caption)).append("\n");
    sb.append("    output: ").append(toIndentedString(output)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

