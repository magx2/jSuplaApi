openapi: 3.0.0
info:
  title: SUPLA Cloud API
  version: 2.3.0
servers:
  - url: https://cloud.supla.org/api/v2.3.0
security:
  - BearerAuth: []
  - OAuth2: []
paths:
  /accessids:
    get:
      tags:
        - Access Identifiers
      summary: Get Access Identifiers list
      operationId: getAccessIdentifiers
      parameters:
        - name: include
          in: query
          description: Specify what extra fields to include in the response.
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - locations
                - clientApps
                - password
      responses:
        200:
          description: List of Access Identifiers owned by the current user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccessIdentifier'
    post:
      tags:
        - Access Identifiers
      summary: Create a new Access Identifier
      operationId: createAccessIdentifier
      responses:
        201:
          description: Newely created AccessIdentifier with automatic name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessIdentifier'
  /accessids/{id}:
    get:
      tags:
        - Access Identifiers
      summary: Get Access Identifier
      operationId: getAccessIdentifier
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - name: include
          in: query
          description: Specify what extra fields to include in the response.
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - locations
                - clientApps
                - password
      responses:
        200:
          description: Get Access Identifier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessIdentifier'
    put:
      tags:
        - Access Identifiers
      summary: Update Access Identifier
      operationId: updateAccessIdentifier
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Access Identifier update request'
        required: true
      responses:
        200:
          description: Definition generated from Swagger Inspector
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessIdentifier'
    delete:
      tags:
        - Access Identifiers
      summary: Delete Access Identifier
      operationId: deleteAccessIdentifier
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        204:
          description: Access Identifier has been successfully deleted
  /channels:
    get:
      tags:
        - Channels
      summary: Get channels list
      operationId: getChannels
      parameters:
        - name: include
          in: query
          description: Specify what extra fields to include in the response.
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - iodevice
                - location
                - connected
                - state
        - name: function
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ChannelFunctionEnumNames'
        - name: io
          in: query
          description: Return only `input` or `output` channels.
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - input
              - output
        - name: hasFunction
          in: query
          description: Return only channels with (`true`) or without (`false`) chosen
            functions.
          required: false
          style: form
          explode: true
          schema:
            type: boolean
      responses:
        200:
          description: List of channels owned by the current user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Channel'
  /channels/{id}:
    get:
      tags:
        - Channels
      summary: Get channel by ID
      operationId: getChannel
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - name: include
          in: query
          description: Specify what extra fields to include in the response.
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - iodevice
                - location
                - connected
                - state
                - supportedFunctions
                - measurementLogsCount
                - relationsCount
      responses:
        200:
          description: Get channel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
    put:
      tags:
        - Channels
      summary: Update channel
      operationId: updateChannel
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Channel update request'
        required: true
      responses:
        200:
          description: Updated channel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
        409:
          description: Channel update will result in data loss. Please confirm the
            request with `confirm=true` GET param to force.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel update confirmation response'
    patch:
      tags:
        - Channels
      summary: Execute action on the channel
      operationId: executeAction
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        description: Defines an action to execute on channel. The `action` key is
          always required. The rest of the keys are params depending on the chosen
          action. Read more on [Github Wiki](https://github.com/SUPLA/supla-cloud/wiki/Channel-Actions).
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelExecuteActionRequest'
        required: true
      responses:
        202:
          description: Action has been executed.
        400:
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel action execution failed response'
  /channels/{id}/schedules:
    get:
      tags:
        - Channels
      summary: Get schedules list of the channel
      operationId: getChannelSchedules
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - name: include
          in: query
          description: Specify what extra fields to include in the response.
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - channel
                - iodevice
                - location
                - closestExecutions
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule'
  /channels/{id}/measurement-logs-csv:
    get:
      tags:
        - Channels
      summary: Get measurement logs as zipped CSV file.
      description: 'Supported channel functions: `THERMOMETER` and `HUMIDITYANDTEMPERATURE`.
        Logs ordered by date, descending.'
      operationId: getChannelMeasurementLogsCsvFile
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/zip: {}
            application/json: {}
        400:
          description: Unsupported channel
          content:
            application/zip:
              schema:
                $ref: '#/components/schemas/Channel unsupported function response'
            application/json:
              schema:
                $ref: '#/components/schemas/Channel unsupported function response'
  /channels/{id}/measurement-logs:
    get:
      tags:
        - Channels
      summary: Get measurement logs.
      description: 'Supported channel functions: `THERMOMETER` and `HUMIDITYANDTEMPERATURE`.
        Logs ordered by date, descending.'
      operationId: getChannelMeasurementLogs
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - name: limit
          in: query
          description: Maximum items count in response, from 1 to 5000
          required: false
          style: form
          explode: true
          schema:
            type: integer
            default: 5000
        - name: offset
          in: query
          description: Pagination offset
          required: false
          style: form
          explode: true
          schema:
            type: integer
      responses:
        200:
          description: Success
          headers:
            X-Total-Count:
              description: Total count of logs for this channel.
              style: simple
              explode: false
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Channel measurement log'
        400:
          description: Unsupoorted channel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel unsupported function response'
  /channel-groups:
    get:
      tags:
        - Channel Groups
      summary: Get channels list
      operationId: getChannelGroups
      parameters:
        - name: include
          in: query
          description: Specify what extra fields to include in the response.
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - channels
      responses:
        200:
          description: List of channels oroups owned by the current user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChannelGroup'
    post:
      tags:
        - Channel Groups
      summary: Create a new channel group
      operationId: createChannelGroup
      requestBody:
        $ref: '#/components/requestBodies/ChannelGroupRequest'
      responses:
        201:
          description: Newely created channel group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelGroup'
  /channel-groups/{id}:
    get:
      tags:
        - Channel Groups
      summary: Get channel group by ID
      operationId: getChannelGroup
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - name: include
          in: query
          description: Specify what extra fields to include in the response.
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - channels
                - iodevice
                - location
                - state
                - relationsCount
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelGroup'
    put:
      tags:
        - Channel Groups
      summary: Update channel group
      operationId: updateChannelGroup
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/ChannelGroupRequest'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelGroup'
    delete:
      tags:
        - Channel Groups
      summary: Delete Channel Group
      operationId: deleteChannelGroup
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        204:
          description: Channel Group has been successfully deleted
    patch:
      tags:
        - Channel Groups
      summary: Execute action on the channel group
      operationId: executeChannelGroupAction
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        description: Defines an action to execute on channel group. The `action` key
          is always required. The rest of the keys are params depending on the chosen
          action. Read more on [Github Wiki](https://github.com/SUPLA/supla-cloud/wiki/Channel-Actions).
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelExecuteActionRequest'
        required: true
      responses:
        204:
          description: Action has been executed.
        400:
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel action execution failed response'
  /client-apps:
    get:
      tags:
        - Client Apps
      summary: Get client apps
      operationId: getClientApps
      parameters:
        - name: include
          in: query
          description: Specify what extra fields to include in the response.
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - accessId
                - connected
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClientApp'
  /client-apps/{id}:
    put:
      tags:
        - Client Apps
      summary: Update client app
      operationId: updateClientApp
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client App update request'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientApp'
    delete:
      tags:
        - Client Apps
      summary: Delete Client App
      operationId: deleteClientApp
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        204:
          description: Success
  /direct-links:
    get:
      tags:
        - Direct Links
      summary: Get Direct Links list
      operationId: getDirectLinks
      parameters:
        - name: include
          in: query
          description: Specify what extra fields to include in the response.
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - subject
        - name: subjectType
          in: query
          description: Filter direct links by subjectType and subjectId (must go together).
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/ActionableSubjectTypeEnum'
        - name: subjectId
          in: query
          description: Filter direct links by subjectType and subjectId (must go together).
          required: false
          style: form
          explode: true
          schema:
            type: integer
      responses:
        200:
          description: List of Direct Links owned by the current user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DirectLink'
    post:
      tags:
        - Direct Links
      summary: Create a new Direct Link
      operationId: createDirectLink
      requestBody:
        $ref: '#/components/requestBodies/DirectLinkRequest'
      responses:
        201:
          description: Newely created DirectLink
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectLink'
  /direct-links/{id}:
    get:
      tags:
        - Direct Links
      summary: Get Direct Link
      operationId: getDirectLink
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - name: include
          in: query
          description: Specify what extra fields to include in the response.
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - subject
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectLink'
    put:
      tags:
        - Direct Links
      summary: Update Direct Link
      operationId: updateDirectLink
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/DirectLinkRequest'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectLink'
    delete:
      tags:
        - Direct Links
      summary: Delete Direct Link
      operationId: deleteDirectLink
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        204:
          description: Success
  /direct-links/{id}/audit:
    get:
      tags:
        - Direct Links
      summary: Get Direct Link audit
      operationId: getDirectLinkAudit
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - name: page
          in: query
          description: Page number, starting from 1.
          required: false
          style: form
          explode: true
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size, default 10.
          required: false
          style: form
          explode: true
          schema:
            type: integer
      responses:
        200:
          description: Success
          headers:
            X-Total-Count:
              description: Total number of audit entries for this Direct Link.
              style: simple
              explode: false
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditEntry'
  /iodevices:
    get:
      tags:
        - IO Devices
      summary: Get IO Devices
      operationId: getIoDevices
      parameters:
        - name: include
          in: query
          description: Specify what extra fields to include in the response.
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - channels
                - location
                - originalLocation
                - connected
                - schedules
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
  /iodevices/{id}:
    get:
      tags:
        - IO Devices
      summary: Get IO Device
      operationId: getIoDevice
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - name: include
          in: query
          description: Specify what extra fields to include in the response.
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - channels
                - location
                - originalLocation
                - connected
                - schedules
                - accessids
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
    put:
      tags:
        - IO Devices
      summary: Update IO Device
      operationId: updateIoDevice
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IO Device update request'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
    delete:
      tags:
        - IO Devices
      summary: Delete IO Device
      operationId: deleteIoDevice
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        204:
          description: Success
  /iodevices/{id}/channels:
    get:
      tags:
        - IO Devices
      summary: Get Channels that belong to IO Deice
      operationId: getIoDeviceChannels
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - name: include
          in: query
          description: Specify what extra fields to include in the response.
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - iodevice
                - location
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Channel'
  /locations:
    get:
      tags:
        - Locations
      summary: Get locations list
      operationId: getLocations
      parameters:
        - name: include
          in: query
          description: Specify what extra fields to include in the response.
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - channels
                - iodevices
                - accessids
                - channelGroups
                - password
      responses:
        200:
          description: List of locations owned by the current user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
    post:
      tags:
        - Locations
      summary: Create a new location
      operationId: createLocation
      responses:
        201:
          description: Newely created location with automatic name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
  /locations/{id}:
    get:
      tags:
        - Locations
      summary: Get location by ID
      operationId: getLocation
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - name: include
          in: query
          description: Specify what extra fields to include in the response.
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - channels
                - iodevices
                - accessids
                - channelGroups
                - password
      responses:
        200:
          description: Get location
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
    put:
      tags:
        - Locations
      summary: Update location
      operationId: updateLocation
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - name: include
          in: query
          description: Specify what extra fields to include in the response.
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - channels
                - iodevices
                - accessids
                - channelGroups
                - password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location update request'
        required: true
      responses:
        200:
          description: Definition generated from Swagger Inspector
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
    delete:
      tags:
        - Locations
      summary: Delete location
      operationId: deleteLocation
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - name: include
          in: query
          description: Specify what extra fields to include in the response.
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - channels
                - iodevices
                - accessids
                - channelGroups
                - password
      responses:
        204:
          description: Location has been successfully deleted
  /server-status:
    get:
      tags:
        - Server
      summary: Get the SUPLA Server status
      operationId: getSuplaServerStatus
      responses:
        200:
          description: Supla Server is alive
        503:
          description: SUPLA Server is down
      security: []
  /server-info:
    get:
      tags:
        - Server
      summary: Get server info
      operationId: getServerInfo
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server Info'
      security: []
  /token-info:
    get:
      tags:
        - Server
      summary: Returns information about used access token
      operationId: getTokenInfo
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  userShortUniqueId:
                    type: string
                  scope:
                    type: string
                  expiresAt:
                    type: integer
  /schedules:
    get:
      tags:
        - Schedules
      summary: Get schedules list
      operationId: getSchedules
      parameters:
        - name: include
          in: query
          description: Specify what extra fields to include in the response.
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - channel
                - iodevice
                - location
                - closestExecutions
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule'
    post:
      tags:
        - Schedules
      summary: Create a new schedule
      operationId: createSchedule
      requestBody:
        $ref: '#/components/requestBodies/ScheduleRequest'
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
    patch:
      tags:
        - Schedules
      summary: Enable schedules
      operationId: enableSchedules
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schedules enable request'
        required: true
      responses:
        204:
          description: Success
  /schedules/{id}:
    get:
      tags:
        - Schedules
      summary: Get Schedule
      operationId: getSchedule
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - name: include
          in: query
          description: Specify what extra fields to include in the response.
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - channel
                - iodevice
                - location
                - closestExecutions
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
    put:
      tags:
        - Schedules
      summary: Update schedule
      operationId: updateSchedule
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - name: enable
          in: query
          description: Set to `true` to enable the schedule after saving.
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            enum:
              - true
      requestBody:
        $ref: '#/components/requestBodies/ScheduleRequest'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
    delete:
      tags:
        - Schedules
      summary: Delete Schedule
      operationId: deleteSchedule
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        204:
          description: Success
  /user-icons:
    get:
      tags:
        - User Icons
      summary: Get user icons
      operationId: getUserIcons
      parameters:
        - name: include
          in: query
          description: Specify what extra fields to include in the response.
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - images
        - name: function
          in: query
          description: Return only icons for given function
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ChannelFunctionEnumNames'
        - name: ids
          in: query
          description: Return only icons with given identifiers
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: integer
      responses:
        200:
          description: List of user icons owned by the current user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserIcon'
    post:
      tags:
        - User Icons
      summary: Create a new User Icon
      operationId: createUserIcon
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body'
      responses:
        201:
          description: Newely created UserIcon
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessIdentifier'
  /user-icons/{id}:
    delete:
      tags:
        - User Icons
      summary: Delete User Icon
      operationId: deleteUserIcon
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        204:
          description: User Icon has been successfully deleted
  /user-icons/{id}/{imageIndex}:
    get:
      tags:
        - User Icons
      summary: Get User Icon image at specified index
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - name: imageIndex
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        200:
          description: User Icon image
          content:
            image/*:
              schema:
                type: string
                format: binary
  /users/current:
    get:
      tags:
        - Users
      summary: Get current user
      operationId: getCurrentUser
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User data'
    patch:
      tags:
        - Users
      summary: Update current user
      operationId: updateCurrentUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User update request'
        required: true
      responses:
        200:
          description: Success
components:
  schemas:
    AccessIdentifier:
      type: object
      properties:
        id:
          type: integer
          description: Access Identifier identifier
        caption:
          type: string
          description: Location caption
        enabled:
          type: boolean
          description: '`true` if the location is enabled, `false` otherwise'
        locationsIds:
          type: array
          description: array containing the location idenfifiers assigned to this
            access ID
          items:
            type: integer
        clientAppsIds:
          type: array
          description: array containing the client apps idenfifiers assigned to this
            access ID
          items:
            type: integer
        locations:
          type: array
          description: Returned only if requested by the `include` parameter.
          items:
            $ref: '#/components/schemas/Location'
        clientApps:
          type: array
          description: Returned only if requested by the `include` parameter.
          items:
            $ref: '#/components/schemas/ClientApp'
    AuditEntry:
      properties:
        id:
          type: integer
        event:
          type: integer
        createdAt:
          type: string
          format: date-time
        ipv4:
          type: integer
          format: int64
        intParam:
          type: integer
        textParam:
          type: string
    ActionableSubjectTypeEnum:
      type: string
      enum:
        - channel
        - channelGroup
    ClientApp:
      type: object
      properties:
        id:
          type: integer
          description: Client application identifier
        name:
          type: string
        caption:
          type: string
        enabled:
          type: boolean
        regIpv4:
          type: integer
          format: int64
        regDate:
          type: string
          format: date-time
        lastAccessIpv4:
          type: integer
          format: int64
        lastAccessDate:
          type: string
          format: date-time
        softwareVersion:
          type: string
        protocolVersion:
          type: integer
        accessIdId:
          type: integer
        connected:
          type: boolean
        accessId:
          $ref: '#/components/schemas/AccessIdentifier'
    Channel:
      type: object
      properties:
        id:
          type: integer
          description: Channel identifier
        channelNumber:
          type: integer
          description: Channel ordinal number in its IO Device
        caption:
          type: string
          description: Channel caption
        type:
          $ref: '#/components/schemas/ChannelType'
        function:
          $ref: '#/components/schemas/ChannelFunction'
        param1:
          $ref: '#/components/schemas/ChannelParam'
        param2:
          $ref: '#/components/schemas/ChannelParam'
        param3:
          $ref: '#/components/schemas/ChannelParam'
        textParam1:
          type: string
        textParam2:
          type: string
        textParam3:
          type: string
        altIcon:
          type: integer
          description: Chosen alternative icon idenifier. Should not be greater than
            `funciton.maxAlternativeIconIndex`
        hidden:
          type: boolean
          description: Whether this channel is shown on client apps or not
        inheritedLocation:
          type: boolean
          description: Whether this channel inherits its IO Device's location (`true`)
            or not (`false`)
        iodeviceId:
          type: integer
        locationId:
          type: integer
        functionId:
          type: integer
          example: 60
        typeId:
          type: integer
          example: 1000
        userIconId:
          type: integer
          example: 100
        iodevice:
          $ref: '#/components/schemas/Device'
        location:
          $ref: '#/components/schemas/Location'
        connected:
          type: boolean
        state:
          description: The channel's state. The value and the format is dependend
            on the channel's function. Read more on [Github Wiki](https://github.com/SUPLA/supla-cloud/wiki/Channel-Functions-states).
          example: {}
        supportedFunctions:
          type: array
          items:
            $ref: '#/components/schemas/ChannelFunction'
    ChannelGroup:
      type: object
      properties:
        id:
          type: integer
          description: Channel group identifier
          example: 1
        hidden:
          type: boolean
          description: Whether this channel group is shown on client apps or not
        caption:
          type: string
          description: Channel caption
        function:
          $ref: '#/components/schemas/ChannelFunction'
        functionId:
          type: integer
          example: 60
        userIconId:
          type: integer
        locationId:
          type: integer
        location:
          $ref: '#/components/schemas/Location'
        channelIds:
          type: array
          items:
            type: integer
        channels:
          type: array
          description: Returned only if requested by the `include` parameter.
          items:
            $ref: '#/components/schemas/Channel'
        altIcon:
          type: integer
          description: Chosen alternative icon idenifier. Should not be greater than
            `funciton.maxAlternativeIconIndex`
    ChannelGroupRequest:
      required:
        - channelIds
      type: object
      properties:
        caption:
          type: string
        altIcon:
          type: integer
        userIconId:
          type: integer
        hidden:
          type: boolean
        locationId:
          type: integer
        channelIds:
          type: array
          items:
            type: integer
    ChannelType:
      type: object
      properties:
        id:
          type: number
          description: Channel type identifier
          enum:
            - 1000
            - 1010
            - 1020
            - 1500
            - 2000
            - 2010
            - 2020
            - 2900
            - 3000
            - 3010
            - 3022
            - 3020
            - 3032
            - 3030
            - 3034
            - 3036
            - 3038
            - 3042
            - 3044
            - 3048
            - 3050
            - 3100
            - 4000
            - 4010
            - 4020
        name:
          type: string
          enum:
            - SENSORNO
            - SENSORNC
            - DISTANCESENSOR
            - CALLBUTTON
            - RELAYHFD4
            - RELAYG5LA1A
            - RELAY2XG5LA1A
            - RELAY
            - THERMOMETERDS18B20
            - DHT11
            - DHT21
            - DHT22
            - AM2301
            - AM2302
            - THERMOMETER
            - HUMIDITYSENSOR
            - HUMIDITYANDTEMPSENSOR
            - WINDSENSOR
            - PRESSURESENSOR
            - RAINSENSOR
            - WEIGHTSENSOR
            - WEATHER_STATION
            - DIMMER
            - RGBLEDCONTROLLER
            - DIMMERANDRGBLED
        caption:
          type: string
          example: Sensor (normal open)
        output:
          type: boolean
          description: Whether the channel is output type (i.e. can take action) or
            input (i.e. provide data)
          example: false
    ChannelFunction:
      type: object
      properties:
        id:
          type: number
          example: 60
          enum:
            - 0
            - 10
            - 20
            - 30
            - 40
            - 42
            - 45
            - 50
            - 60
            - 70
            - 80
            - 90
            - 100
            - 110
            - 120
            - 130
            - 140
            - 180
            - 190
            - 200
            - 210
            - 220
            - 230
            - 240
            - 250
            - 260
            - 270
            - 280
            - 290
            - 300
        name:
          $ref: '#/components/schemas/ChannelFunctionEnumNames'
        caption:
          type: string
          example: Gate opening sensor
        maxAlternativeIconIndex:
          type: integer
        possibleActions:
          type: array
          description: What can you with with this channel?
          items:
            $ref: '#/components/schemas/ChannelFunctionAction'
        possibleVisualStates:
          type: array
          description: Possible visual states of channel with this function. Ordered.
          items:
            type: string
            enum:
              - opened
              - closed
              - partially_closed
              - default
              - empty
              - full
              - revealed
              - shut
              - on
              - off
              - rgb_on_dim_on
              - rgb_on_dim_off
              - rgb_off_dim_off
              - rgb_off_dim_on
    ChannelFunctionEnumNames:
      type: string
      example: OPENINGSENSOR_GATE
      enum:
        - NONE
        - CONTROLLINGTHEGATEWAYLOCK
        - CONTROLLINGTHEGATE
        - CONTROLLINGTHEGARAGEDOOR
        - THERMOMETER
        - HUMIDITY
        - HUMIDITYANDTEMPERATURE
        - OPENINGSENSOR_GATEWAY
        - OPENINGSENSOR_GATE
        - OPENINGSENSOR_GARAGEDOOR
        - NOLIQUIDSENSOR
        - CONTROLLINGTHEDOORLOCK
        - OPENINGSENSOR_DOOR
        - CONTROLLINGTHEROLLERSHUTTER
        - OPENINGSENSOR_ROLLERSHUTTER
        - POWERSWITCH
        - LIGHTSWITCH
        - DIMMER
        - RGBLIGHTING
        - DIMMERANDRGBLIGHTING
        - DEPTHSENSOR
        - DISTANCESENSOR
        - OPENINGSENSOR_WINDOW
        - MAILSENSOR
        - WINDSENSOR
        - PRESSURESENSOR
        - RAINSENSOR
        - WEIGHTSENSOR
        - WEATHER_STATION
        - STAIRCASETIMER
    ChannelFunctionAction:
      type: object
      properties:
        id:
          type: number
          enum:
            - 10
            - 20
            - 30
            - 40
            - 50
            - 60
            - 70
            - 80
            - 90
            - 100
        name:
          $ref: '#/components/schemas/ChannelFunctionActionEnum'
        caption:
          type: string
    ChannelFunctionActionEnum:
      type: string
      enum:
        - OPEN
        - CLOSE
        - SHUT
        - REVEAL
        - REVEAL_PARTIALLY
        - TURN_ON
        - TURN_OFF
        - SET_RGBW_PARAMETERS
        - OPEN_CLOSE
        - STOP
        - TOGGLE
        - READ
    ChannelExecuteActionRequest:
      required:
        - action
      type: object
      properties:
        action:
          $ref: '#/components/schemas/ChannelFunctionActionEnum'
        percentage:
          type: integer
          example: 40
        color:
          type: string
          example: 0x00FF00
        color_brightness:
          type: integer
        brightness:
          type: integer
    ChannelParam:
      type: integer
      description: Configuration of the channel behavior. Value meaning depends on
        the chosen channel function. See more details on [Github Wiki](https://github.com/SUPLA/supla-cloud/wiki/Channel-Functions-parameters).
    Device:
      type: object
      properties:
        id:
          type: integer
          description: Device identifier
        name:
          type: string
        enabled:
          type: boolean
        comment:
          type: string
        regDate:
          type: string
          format: date-time
        regIpv4:
          type: integer
          format: int64
        lastConnected:
          type: string
          format: date-time
        lastIpv4:
          type: integer
          format: int64
        softwareVersion:
          type: string
        gUIDString:
          type: string
        locationId:
          type: integer
        originalLocationId:
          type: integer
        channelsIds:
          type: array
          items:
            type: integer
        connected:
          type: boolean
        location:
          $ref: '#/components/schemas/Location'
        originalLocation:
          $ref: '#/components/schemas/Location'
        channels:
          type: array
          description: Returned only if requested by the `include` parameter.
          items:
            $ref: '#/components/schemas/Channel'
        schedules:
          type: array
          description: Returned only if requested by the `include` parameter.
          items:
            $ref: '#/components/schemas/Schedule'
    DirectLink:
      type: object
      properties:
        id:
          type: integer
          description: Direct Link identifier
          example: 1
        caption:
          type: string
          description: Direct Link caption
        executionsLimit:
          type: integer
          example: 10
        lastUsed:
          type: string
          format: date-time
        lastIpv4:
          type: integer
          format: int64
        enabled:
          type: boolean
        disableHttpGet:
          type: boolean
        activeDateRange:
          $ref: '#/components/schemas/DirectLink_activeDateRange'
        slug:
          type: string
          description: Returned only immediately after creation
        url:
          type: string
          description: Returned only immediately after creation
        subjectId:
          type: integer
        subjectType:
          $ref: '#/components/schemas/ActionableSubjectTypeEnum'
        allowedActions:
          type: array
          items:
            $ref: '#/components/schemas/ChannelFunctionActionEnum'
        active:
          type: boolean
        inactiveReason:
          type: string
          description: Returned only if active is `false`
    DirectLinkRequest:
      properties:
        subjectId:
          type: integer
        subjectType:
          $ref: '#/components/schemas/ActionableSubjectTypeEnum'
        allowedActions:
          type: array
          items:
            $ref: '#/components/schemas/ChannelFunctionActionEnum'
        activeDateRange:
          $ref: '#/components/schemas/DirectLink_activeDateRange'
        executionsLimit:
          type: integer
          example: 10
        caption:
          type: string
        enabled:
          type: boolean
        disableHttpGet:
          type: boolean
    Location:
      type: object
      properties:
        id:
          type: integer
          description: Location identifier
        caption:
          type: string
          description: Location caption
        enabled:
          type: boolean
          description: '`true` if the location is enabled, `false` otherwise'
        iodevicesIds:
          type: array
          description: array containing the IO Devices identifiers assigned to this
            location
          items:
            type: integer
        channelGroupsIds:
          type: array
          description: array containing the Channel groups identifiers assigned to
            this location
          items:
            type: integer
        channelsIds:
          type: array
          description: array containing the Channels identifiers expicitely assigned
            to this location
          items:
            type: integer
        accessIdsIds:
          type: array
          description: array containing the Access Identifiers identifiers assigned
            to this location
          items:
            type: integer
        password:
          type: string
          description: Location password (plain text). Returned only if requested
            by the `include` parameter.
        iodevices:
          type: array
          description: Returned only if requested by the `include` parameter.
          items:
            $ref: '#/components/schemas/Device'
        channelGroups:
          type: array
          description: Returned only if requested by the `include` parameter.
          example: []
          items:
            $ref: '#/components/schemas/ChannelGroup'
        accessIds:
          type: array
          description: Returned only if requested by the `include` parameter.
          items:
            $ref: '#/components/schemas/AccessIdentifier'
        channels:
          type: array
          description: Returned only if requested by the `include` parameter.
          items:
            $ref: '#/components/schemas/Channel'
    Schedule:
      type: object
      properties:
        id:
          type: integer
          description: Schedule identifier
        timeExpression:
          type: string
          description: Schedule time expression in crontab notation (with some custom
            additions).
          example: '*/5 * * * *'
        action:
          $ref: '#/components/schemas/ChannelFunctionAction'
        actionParam:
          description: Depends on the action.
          example: {}
        mode:
          type: string
          enum:
            - minutely
            - hourly
            - daily
            - once
        dateStart:
          type: string
          format: date-time
        dateEnd:
          type: string
          format: date-time
        enabled:
          type: boolean
        caption:
          type: string
        retry:
          type: boolean
        channelId:
          type: integer
        actionId:
          type: integer
        channel:
          $ref: '#/components/schemas/Channel'
        closestExecutions:
          type: array
          description: Returned only if requested by the `include` parameter. Contains
            two arrays of maximum 3 closest past and future executions.
          items:
            $ref: '#/components/schemas/Schedule_closestExecutions'
    ScheduleRequest:
      required:
        - actionId
        - channelId
        - mode
        - timeExpression
      type: object
      properties:
        channelId:
          type: integer
        actionId:
          type: integer
        mode:
          type: string
          enum:
            - once
            - minutely
            - daily
            - hourly
        timeExpression:
          type: string
          description: Schedule time expression in crontab notation (with some custom
            additions).
        actionParam:
          example: {}
        dateStart:
          type: string
          format: date-time
        dateEnd:
          type: string
          format: date-time
        caption:
          type: string
        retry:
          type: boolean
    UserIcon:
      properties:
        id:
          type: integer
          description: Schedule identifier
        images:
          type: array
          description: Returned only if requested by the `include` parameter. Array
            contains images blobs encoded with Base64.
          items:
            type: string
            format: base64
    Access Identifier update request:
      title: Access Identifier update request
      type: object
      properties:
        enabled:
          type: boolean
        caption:
          type: string
        password:
          type: string
          description: Provide new password if you want to change it.
        locationsIds:
          type: array
          description: Locations identifiers to assign to this Access Identifier.
          items:
            type: integer
        clientAppsIds:
          type: array
          description: Client Apps identifiers to assign to this Access Identifier.
            If client app is connected to any other Client ID, it will be disconnected
            from the old one before assigning.
          items:
            type: integer
    Channel update request:
      title: Channel update request
      type: object
      properties:
        functionId:
          type: integer
        param1:
          type: integer
        param2:
          type: integer
        param3:
          type: integer
        textParam1:
          type: string
        textParam2:
          type: string
        textParam3:
          type: string
        caption:
          type: string
        altIcon:
          type: integer
        hidden:
          type: boolean
        locationId:
          type: integer
        inheritedLocation:
          type: boolean
        userIconId:
          type: integer
    Channel update confirmation response:
      type: object
      properties:
        schedules:
          type: array
          description: Schedules that will be deleted after this request.
          items:
            $ref: '#/components/schemas/Schedule'
        groups:
          type: array
          description: Channel groups that this channel will be removed from after
            this request.
          items:
            $ref: '#/components/schemas/ChannelGroup'
    Channel action execution failed response:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: string
          example: Cannot execute requested action on this channel.
    Channel unsupported function response:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: string
          example: The requested function is not available on this channel
    Channel measurement log:
      type: object
      properties:
        date_timestamp:
          type: integer
        temperature:
          type: number
          description: Temperature in Celsius
          format: float
          example: 21.56
        humidity:
          type: number
          description: Humidity percent. Available only if channel function is `HUMIDITYANDTEMPERATURE`.
          format: float
          example: 48.8
    Client App update request:
      title: Client App update request
      type: object
      properties:
        caption:
          type: string
        enabled:
          type: boolean
        accessIdId:
          type: integer
    IO Device update request:
      title: IO Device update request
      type: object
      properties:
        comment:
          type: string
        enabled:
          type: boolean
        locationId:
          type: integer
    Location update request:
      title: Location update request
      type: object
      properties:
        enabled:
          type: boolean
        caption:
          type: string
        password:
          type: string
          description: Provide new password if you want to change it.
        accessIdsIds:
          type: array
          description: Access Identifiers identifiers to assign to this location.
          items:
            type: integer
    Server Info_timezone:
      type: object
      properties:
        name:
          type: string
          example: UTC
        offset:
          type: integer
          description: Timezone offset in minutes
    Server Info:
      type: object
      properties:
        address:
          type: string
          description: SUPLA Server address (to be used in smartphones)
          example: svr1.supla.org
        time:
          type: string
          description: Current server time
          format: date-time
        timezone:
          $ref: '#/components/schemas/Server Info_timezone'
        authenticated:
          type: boolean
        username:
          type: string
          description: Present only if `authenticated=true`
          example: supler@supla.org
        cloudVersion:
          type: string
          example: 2.2.0
        apiVersion:
          type: string
          example: 2.2.0
        supportedApiVersions:
          type: array
          example:
            - 2.0.0
            - 2.1.0
            - 2.2.0
          items:
            type: string
    Schedules enable request:
      title: Schedules enable request
      type: object
      properties:
        enable:
          type: array
          description: Array of schedule identifiers to enable
          items:
            type: integer
    body:
      properties:
        function:
          $ref: '#/components/schemas/ChannelFunctionEnumNames'
        sourceIcon:
          type: integer
          description: ID of an existing user icon to replace with these new files.
            Optional.
        image1:
          type: string
          format: binary
        image2:
          type: string
          format: binary
        image3:
          type: string
          format: binary
        image4:
          type: string
          format: binary
      description: Multipart request with files to save as a new icon. The number
        of images required to be sent with the request is determined by the chosen
        function identifier (it must match the `function.possibleVisualStates` count).
        Each image represents the respective visual state from `function.possibleVisualStates`
        array.
    User data:
      type: object
      properties:
        id:
          type: integer
        shortUniqueId:
          type: string
        email:
          type: string
          format: email
        timezone:
          type: string
          example: Europe/Warsaw
        clientsRegistrationEnabled:
          type: string
          format: date-time
        ioDevicesRegistrationEnabled:
          type: string
          format: date-time
    User update request:
      title: User update request
      type: object
      properties:
        action:
          type: string
          description: The `change:userTimezone` requires to provide also a `timezone`
            value in the request. The `change:password` requires to provide also a
            `newPassword` and `oldPassword` in the request.
          enum:
            - change:clientsRegistrationEnabled
            - change:ioDevicesRegistrationEnabled
            - change:userTimezone
            - change:password
            - agree:rules
            - agree:cookies
    DirectLink_activeDateRange:
      type: object
      properties:
        dateStart:
          type: string
          format: date-time
        dateEnd:
          type: string
          format: date-time
    Schedule_result:
      type: object
      properties:
        caption:
          type: string
          example: Successful
    Schedule_past:
      type: object
      properties:
        plannedTimestamp:
          type: string
          format: date-time
        resultTimestamp:
          type: string
          format: date-time
        failed:
          type: boolean
          example: false
        result:
          $ref: '#/components/schemas/Schedule_result'
    Schedule_future:
      type: object
      properties:
        plannedTimestamp:
          type: string
          format: date-time
    Schedule_closestExecutions:
      type: object
      properties:
        past:
          type: array
          items:
            $ref: '#/components/schemas/Schedule_past'
        future:
          type: array
          items:
            $ref: '#/components/schemas/Schedule_future'
  parameters:
    AccessIdIncludes:
      name: include
      in: query
      description: Specify what extra fields to include in the response.
      required: false
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
          enum:
            - locations
            - clientApps
            - password
  requestBodies:
    ChannelGroupRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChannelGroupRequest'
      required: true
    DirectLinkRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DirectLinkRequest'
    ScheduleRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ScheduleRequest'
      required: true
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://cloud.supla.org/oauth/v2/auth
          tokenUrl: https://cloud.supla.org/oauth/v2/token
          scopes:
            accessids_r: Access Identifiers (Read)
            accessids_rw: Access Identifiers (Read/Write)
            account_r: User Account (Read)
            account_rw: User Account (Read/Write)
            channels_r: Channels (Read)
            channels_rw: Channels (Read/Write)
            channels_ea: Channels (Execute Actions)
            channels_files: Channels (download files, e.g. icons, measurement logs)
            channelgroups_r: Channel Groups (Read)
            channelgroups_rw: Channel Groups (Read/Write)
            channelgroups_ea: Channel Groups (Execute Actions)
            clientapps_r: Client Apps (Read)
            clientapps_rw: Client Apps (Read/Write)
            directlinks_r: Direct Links (Read)
            directlinks_rw: Direct Links (Read/Write)
            iodevices_r: IO Devices (Read)
            iodevices_rw: IO Devices (Read/Write)
            locations_r: Locations (Read)
            locations_rw: Locations (Read/Write)
            schedules_r: Schedules (Read)
            schedules_rw: Schedules (Read/Write)
            offline_access: Request refresh token
